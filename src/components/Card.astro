---
import Link from "./Link.astro";

interface Props {
  title: string;
  body: string;
  href: string;
  live: string;
  repostory: string;
	topics:string[];
}

const { href, title, body, live, repostory, topics } = Astro.props;
---

<li class="link-card w-full h-full flex-[0.3] flex-col border border-white">
  <a href={href}>
    <h2 class=" font-code text-2xl">
      {title}
      <span>&rarr;</span>
    </h2>
    <p class=" font-code w-full tracking-normal break-words break-all mt-4">
      {body}
    </p>
  </a>
	<!-- <div class="pl-6 flex justify-around items-center w-full h-auto">
		{topics && topics.splice(0,2).map(topic => <span class="font-code font-normal border border-base-grey rounded-full py-2 px-3 text-white hover:text-tag-purple">{topic}</span>)} ...
	</div> -->
  <div class="w-full h-auto flex items-center justify-around p-4">
    {live && <Link path={live}>{`Live <~>`}</Link>}
	{ repostory &&<Link path={repostory}>
      {`repository`}
    </Link>}
  </div>
</li>
<style>
  .link-card {
    list-style: none;
    display: flex;
    padding: 1px;
    background-image: none;
    background-size: 400%;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
  }
  .link-card > a {
    width: 100%;
    text-decoration: none;
    line-height: 1.4;
    padding: calc(1.5rem - 1px);
    border-radius: 8px;
    color: white;
    opacity: 0.8;
  }
  h2 {
    margin: 0;
    font-size: 1.25rem;
    transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
  }

  .link-card:is(:hover, :focus-within) {
    background-position: 0;
    background-image: var(--accent-gradient);
  }
  .link-card:is(:hover, :focus-within) h2 {
    color: rgb(var(--accent-light));
  }
</style>
